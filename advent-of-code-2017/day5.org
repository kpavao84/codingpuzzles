* =--- Day 5: A Maze of Twisty Trampolines, All Alike ---=

An urgent interrupt arrives from the CPU: it's trapped in a maze of jump instructions, and it would like assistance from any programs with spare cycles to help find the exit.

The message includes a list of the offsets for each jump. Jumps are relative: =-1= moves to the previous instruction, and =2= skips the next one. Start at the first instruction in the list. The goal is to follow the jumps until one leads outside the list.

In addition, these instructions are a little strange; after each jump, the offset of that instruction increases by =1=. So, if you come across an offset of =3=, you would move three instructions forward, but change it to a =4= for the next time it is encountered.

For example, consider the following list of jump offsets:

#+BEGIN_SRC 
0
3
0
1
-3
#+END_SRC

Positive jumps ("forward") move downward; negative jumps move upward. For legibility in this example, these offset values will be written all on one line, with the current instruction marked in parentheses. The following steps would be taken before an exit is found:

- =(0) 3  0  1  -3=  - before we have taken any steps.
- =(1) 3  0  1  -3=  - jump with offset =0= (that is, don't jump at all). Fortunately, the instruction is then incremented to =1=.
- =2 (3) 0  1  -3=  - step forward because of the instruction we just modified. The first instruction is incremented again, now to =2=.
- =2  4  0  1 (-3)= - jump all the way to the end; leave a =4= behind.
- =2 (4) 0  1  -2=  - go back to where we just were; increment =-3= to =-2=.
- =2  5  0  1  -2=  - jump =4= steps forward, escaping the maze.

In this example, the exit is reached in =5= steps.

How many steps does it take to reach the exit?

** DONE Solution
This solution is fairly inefficient but it works.

I could probably use a different data structure to create the maze in like an array.
#+BEGIN_SRC scheme :tangle src/day5-01.scm
  (use-modules (ice-9 rdelim))

  (define (maze-steps)
    ;; List -> List
    ;; read the file and return a list of the numbers in the maze
    (define (generate-maze maze)
      (let ((line (read-line)))
        (if (eof-object? line)
            (map (lambda (x) (string->number x)) (reverse maze))
            (generate-maze (cons line maze)))))

    ;; List Inter Integer Integer -> Integer
    ;; traverse the maze until reaching the end
    ;; return the number of steps it took
    (define (traverse-maze maze position steps end)
      (if (>= position end)
          steps
          (traverse-maze (increase-maze-position maze position)
                         (jump maze position)
                         (1+ steps)
                         end)))

    ;; Integer List -> Integer
    ;; return the new position after jumping
    (define (jump maze position)
      (+ position (list-ref maze position)))

    ;; Integer List -> List
    ;; return a list with the given position increased by 1
    (define (increase-maze-position maze position)
      (set-nth maze position (1+ (list-ref maze position))))

    (let ((maze (generate-maze '())))
      (traverse-maze maze 0 0 (length maze))))

  (define (main)
    (with-input-from-file "input.day5.txt" maze-steps))

  ;; List Integer Integer -> List
  ;; set the element of a list at the given index to the given value 
  (define (set-nth lst index value)
    (if (> index 0)
        (cons (car lst)
              (set-nth (cdr lst) (1- index) value))
        (cons value (cdr lst))))
#+END_SRC


** DONE Solution
#+BEGIN_SRC scheme
  (use-modules (ice-9 rdelim))

  (define (maze-steps)
    ;; List -> List
    ;; read the file and return a list of the numbers in the maze
    (define (generate-maze maze)
      (let ((line (read-line)))
        (if (eof-object? line)
            (map (lambda (x) (string->number x)) (reverse maze))
            (generate-maze (cons line maze)))))

    ;; List Integer Integer Integer -> Integer
    ;; traverse the maze until reaching the end
    ;; return the number of steps it took
    (define (traverse-maze maze position steps end)
      (if (>= position end)
          steps
          (traverse-maze (increase-maze-position maze position)
                         (jump maze position)
                         (1+ steps)
                         end)))

    ;; Integer List -> Integer
    ;; return the new position after jumping
    (define (jump maze position)
      (+ position (list-ref maze position)))

    ;; Integer List -> List
    ;; return a list with the given position increased by 1
    (define (increase-maze-position maze position)
      (let ((offset (list-ref maze position)))
        (set-nth maze position (if (>= offset 3)
                                   (- offset 1)
                                   (1+ offset)))))

    ;; start traversing the maze
    (let ((maze (generate-maze '())))
      (traverse-maze maze 0 0 (length maze))))

  (define (main)
    (with-input-from-file "input.day5.txt" maze-steps))

  ;; List Integer Integer -> List
  ;; set the element of a list at the given index to the given value 
  (define (set-nth lst index value)
    (if (> index 0)
        (cons (car lst)
              (set-nth (cdr lst) (1- index) value))
        (cons value (cdr lst))))
#+END_SRC
