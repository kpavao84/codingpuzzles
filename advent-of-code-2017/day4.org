* =--- Day 4: High-Entropy Passphrases ---=

A new system policy has been put in place that requires all accounts to use a passphrase instead of simply a password. A passphrase consists of a series of words (lowercase letters) separated by spaces.

To ensure security, a valid passphrase must contain no duplicate words.

For example:

    aa bb cc dd ee is valid.
    aa bb cc dd aa is not valid - the word aa appears more than once.
    aa bb cc dd aaa is valid - aa and aaa count as different words.

The system's full passphrase list is available as your puzzle input. How many passphrases are valid?
** DONE Solution
#+BEGIN_SRC scheme :tangle src/day4-01.scm
  (define (high-entropy-passphrases)
    (define (parse-row row)
      (string-split row #\space))

    (define (valid? row)
      (cond ((null? row) #t)
            ((member (car row) (cdr row)) #f)
            (else (valid? (cdr row)))))

    (define (sum-valid-passphrases sum)
      (let ((row (read-line)))
        (if (eof-object? row)
            sum
            (sum-valid-passphrases (+ sum
                                      (if (valid? (parse-row row)) 1 0))))))

    (sum-valid-passphrases 0))

  (define (main)
    (with-input-from-file "input.day4.txt" high-entropy-passphrases))
#+END_SRC

* =--- Part Two ---=

For added security, yet another system policy has been put in place. Now, a valid passphrase must contain no two words that are anagrams of each other - that is, a passphrase is invalid if any word's letters can be rearranged to form any other word in the passphrase.

For example:

- =abcde fghij= is a valid passphrase.
- =abcde xyz ecdab= is not valid - the letters from the third word can be rearranged to form the first word.
- =a ab abc abd abf abj= is a valid passphrase, because all letters need to be used when forming another word.
- =iiii oiii ooii oooi oooo= is valid.
- =oiii ioii iioi iiio= is not valid - any of these words can be rearranged to form any other word.

Under this new system policy, how many passphrases are valid?

** DONE Solution
Check to see if there are any anagrams by sorting each word in the list alphabetically.

This way I can use the same logic from part 1.

#+BEGIN_SRC scheme :tangle src/day4-02.scm
  (define (high-entropy-passphrases)
    (define (parse-row row)
      (alphabetize-list (string-split row #\space)))

    (define (valid? row)
      (cond ((null? row) #t)
            ((member (car row) (cdr row)) #f)
            (else (valid? (cdr row)))))

    (define (alphabetize-list words)
      (map (lambda (word) (sort-word word)) words))

    (define (sort-word word)
      (accumulate string-append ""
                  (map (lambda (letter) (string letter))
                       (sort (string->list word) char-ci<?))))

    (define (sum-valid-passphrases sum)
      (let ((row (read-line)))
        (if (eof-object? row)
            sum
            (sum-valid-passphrases (+ sum
                                      (if (valid? (parse-row row)) 1 0))))))

    (sum-valid-passphrases 0))

  (define (main)
    (with-input-from-file "input.day4.txt" high-entropy-passphrases))

  ;; from SICP
  (define (accumulate op initial sequence)
    (if (null? sequence)
        initial
        (op (car sequence)
            (accumulate op initial (cdr sequence)))))
#+END_SRC
